# Heap â€“ Detailed Notes

---

## ðŸŸ¦ What is a Heap?

- A **Heap** is a **complete binary tree**.
- It satisfies the **Heap Property**:
  - **Max Heap**: Each nodeâ€™s value is **greater than or equal to** its children.
  - **Min Heap**: Each nodeâ€™s value is **less than or equal to** its children.
- All levels are fully filled except possibly the last, which is filled **left to right**.

---

## ðŸŸ© Types of Heap

- **Max Heap**: Used in Priority Queue, Heap Sort.
- **Min Heap**: Used in Dijkstraâ€™s Algorithm, Task Scheduling, etc.

---

## ðŸŸ¨ Heap Representation (Array)

A heap is typically implemented using an array:

- For node at index `i`:
  - **Left child:** `2 * i + 1`
  - **Right child:** `2 * i + 2`
  - **Parent:** `(i - 1) / 2`

---

## ðŸŸ§ Heap Operations

### 1. Insertion

1. Insert the new element at the end of the array (next available spot).
2. Perform **Heapify-Up (Bubble-Up)**:
   - While the inserted node violates heap property:
     - Swap it with its parent.
3. **Time Complexity:** `O(log n)`

---

### 2. Deletion (of Root Node)

1. Replace the root node with the last node.
2. Remove the last node.
3. Perform **Heapify-Down (Bubble-Down)**:
   - Compare the new root with its children.
   - Swap with the **larger child** (for Max Heap) or **smaller** (for Min Heap).
   - Continue until heap property is restored.
4. **Time Complexity:** `O(log n)`

---

### 3. Heapify

Used to convert a subtree rooted at index `i` into a valid heap.

```cpp
void heapify(int arr[], int n, int i) {
    int largest = i; // For Max Heap
    int left = 2*i + 1;
    int right = 2*i + 2;

    if(left < n && arr[left] > arr[largest])
        largest = left;

    if(right < n && arr[right] > arr[largest])
        largest = right;

    if(largest != i){
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}
```

---

### 4. Build Heap (from Array)

```cpp
for(int i = n/2 - 1; i >= 0; i--)
    heapify(arr, n, i);
```
- **Time Complexity:** `O(n)` (not `O(n log n)`)

---

## ðŸŸ¦ Heap Sort

1. Build a Max Heap.
2. Swap the root with the last element.
3. Reduce heap size by 1 and heapify from root.
4. Repeat the above steps.

- **Time Complexity:** `O(n log n)`
- **In-place:** Yes
- **Stable:** No

---

## ðŸŸ© Additional Concepts

### Priority Queue with Heap (C++)

```cpp
priority_queue<int> maxHeap; // Max Heap
priority_queue<int, vector<int>, greater<int>> minHeap; // Min Heap
```

---

### Applications of Heap

- Dijkstra's Shortest Path (Min Heap)
- Primâ€™s Minimum Spanning Tree
- Job/Task Scheduling
- Top K elements in stream
- Median in data stream (using 2 Heaps)

---

### Why Build Heap is O(n) and Not O(n log n)?

- Although heapify per node takes `O(log n)`, the number of nodes at each height reduces exponentially.
- Total work done across all nodes â‰ˆ `O(n)`

---

## ðŸŸ¨ Quick Recap Table

| Operation        | Time Complexity |
|------------------|----------------|
| Insertion        | O(log n)       |
| Deletion (Root)  | O(log n)       |
| Build Heap       | O(n)           |
| Heapify (1 node) | O(log n)       |
| Heap Sort        | O(n log n)     |

---

*Let me know if you'd like a **diagram**, **dry run example**, or **heap problem set** to practice!*